/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Nextflow base config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    A 'blank slate' config file, appropriate for general use on most high performance
    compute environments. Assumes that all software is installed and available on
    the PATH. Runs in `local` mode - all jobs will be run on the logged in environment.
----------------------------------------------------------------------------------------
*/

process {

    cpus   = { check_max( 1    * task.attempt, 'cpus'   ) }
    memory = { check_max( 6.GB * task.attempt, 'memory' ) }
    time   = { check_max( 4.h  * task.attempt, 'time'   ) }

    errorStrategy = { task.exitStatus in ((130..145) + 104) ? 'retry' : 'finish' }
    maxRetries    = 1
    maxErrors     = '-1'

    // Process-specific resource requirements
    // NOTE - Please try and re-use the labels below as much as possible.
    //        These labels are used and recognised by default in DSL2 files hosted on nf-core/modules.
    //        If possible, it would be nice to keep the same label naming convention when
    //        adding in your local modules too.
    // See https://www.nextflow.io/docs/latest/config.html#config-process-selectors

    withLabel:process_single_small {
        cpus   = { check_max( 0.5                , 'cpus'    ) }
        memory = { check_max( 4.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 1.h  * task.attempt, 'time'    ) }
    }
    
    withLabel:process_single {
        cpus   = { check_max( 1                  , 'cpus'    ) }
        memory = { check_max( 6.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 1.h  * task.attempt, 'time'    ) }
    }
    withLabel:process_single_medium {
        cpus   = { check_max( 1                   , 'cpus'   ) }
        memory = { check_max( 8.GB * task.attempt, 'memory' ) }
        time   = { check_max( 1.h   * task.attempt, 'time'   ) }
    }
    withLabel:process_single_high {
        cpus   = { check_max( 1                   , 'cpus'   ) }
        memory = { check_max( 15.GB * task.attempt, 'memory' ) }
        time   = { check_max( 1.h   * task.attempt, 'time'   ) }
    }
    withLabel:process_dual_low {
        cpus   = { check_max( 2                   , 'cpus'   ) }
        memory = { check_max( 6.GB  * task.attempt, 'memory' ) }
        time   = { check_max( 1.h   * task.attempt, 'time'   ) }
    }
    withLabel:process_dual_medium {
        cpus   = { check_max( 2                   , 'cpus'    ) }
        memory = { check_max( 10.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 2.h   * task.attempt, 'time'    ) }
    }
    withLabel:process_medium {
        cpus   = { check_max( 2                   , 'cpus'    ) }
        memory = { check_max( 15.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 3.h   * task.attempt, 'time'    ) }
    }
    withLabel:process_high_medium {
        cpus   = { check_max( 4                   , 'cpus'    ) }
        memory = { check_max( 10.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 1.h   * task.attempt, 'time'    ) }
    }
    withLabel:process_high {
        cpus   = { check_max( 14                  , 'cpus'    ) }
        memory = { check_max( 15.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 2.h   * task.attempt, 'time'    ) }
    }
    withLabel:process_long {
        time   = { check_max( 20.h  * task.attempt, 'time'    ) }
    }
    withLabel:process_high_memory {
        memory = { check_max( 200.GB * task.attempt, 'memory' ) }
    }
    withLabel:error_ignore {
        errorStrategy = 'ignore'
    }
    withLabel:error_retry {
        errorStrategy = 'retry'
        maxRetries    = 2
    }

    // Custom
    withLabel:process_simply_high {
        cpus   = { check_max( 10    * task.attempt, 'cpus'    ) }
        memory = { check_max( 20.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 1.h   * task.attempt, 'time'    ) }
    }

    withLabel:process_simply_medium_cpu {
        cpus   = { check_max( 10     * task.attempt, 'cpus'    ) }
        memory = { check_max( 10.GB  * task.attempt, 'memory'  ) }
        time   = { check_max( 1.h    * task.attempt, 'time'    ) }
    }

    withLabel:process_fixed_low_cpu {
        cpus   = { check_max( 10    * task.attempt, 'cpus'    ) }
        memory = { check_max( 20.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 1.h   * task.attempt, 'time'    ) }
    }

    withLabel:process_fixed_low_cpu_medium_memory {
        cpus   = { check_max( 10    * task.attempt, 'cpus'    ) }
        memory = { check_max( 30.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 1.h   * task.attempt, 'time'    ) }
    }

    withLabel:process_fixed_average_cpu {
        cpus   = { check_max( 20    * task.attempt, 'cpus'    ) }
        memory = { check_max( 20.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 1.h   * task.attempt, 'time'    ) }
    }

    withLabel: process_fixed_low_cpu_high_memory {
        cpus   = { check_max( 10    * task.attempt, 'cpus'    ) }
        memory = { check_max( 40.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 1.h   * task.attempt, 'time'    ) }
    }

    // Custom
    withLabel:process_fixed_medium_cpu {
        cpus   = { check_max( 30    * task.attempt, 'cpus'    ) }
        memory = { check_max( 30.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 1.h   * task.attempt, 'time'    ) }
    }

}
